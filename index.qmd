---
title: "Mathematics Exploration with 3D Printing"
subtitle: "Bringing Data to Life with Matrices and Models"
author:
  - name: Yosep Dwi Kristanto
    url: https://people.usd.ac.id/~ydkristanto/
    affiliation: PhD in Education, Johannes Kepler University Linz
    affiliation-url: https://www.jku.at/en
    orcid: 0000-0003-1446-0422
date: 2024/11/25
lightbox: true
format:
  html:
    toc: true
    anchor-sections: true
    smooth-scroll: true
    code-link: true
editor: visual
execute: 
  echo: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| message: false

library(tidyverse)
library(plotly)
library(rayshader)
```

::::::::::::: panel-tabset
## Preparation

### Lesson Narrative

This lesson builds on concepts from previous units and introduces the matrix as a tool for data representation. In grade 7, students learn how to formulate questions, collect data, present it, and analyze it to answer those questions. They also gain experience using bar charts and pie charts for data presentation and interpretation. In this lesson, students extend their understanding by representing real-world data in matrix form and visualizing it through 3D modeling and printing.

In Lesson 1, students will learn how to represent real-world data using matrices and interpret the information presented in matrix form. Through this process, they will develop skills in analyzing data representations, identifying key messages, and evaluating the effectiveness and efficiency of different representations. By the end of the lesson, students will have a deeper understanding of how matrices can be used to organize and convey data, and they will be introduced to matrices as a powerful tool for data representation.

In Lesson 2, students will learn how to represent data in a matrix format and then transform it into a 3D model using a 3D printer. They will start by visualizing the matrix data as a heatmap, and then use this heatmap to create a 3D model. Finally, students will print their 3D model using a 3D printer. Through this process, students will see how abstract matrix data can be brought to life in the physical world.

In Lesson 3, students will use real-world topographical data to create and print a physical model. They will start by using NASA Earth data to obtain an elevation matrix of a location of their choice. This data will then be modeled into a 3D representation, which students will print using a 3D printer. By the end of the lesson, students will have created a tangible topographical model from real-world elevation data.

### Learning Goals

Students will be able to represent real-world data (such as temperature or topography) in matrix form, interpret the data, and visualize it through 3D modeling and printing, converting abstract data into tangible models.

### Required Materials

-   Computers or tablets with R programming

-   Access to a 3D printer

-   Projector and whiteboard

### Required Preparation

-   **Computer with R Programming:** Teachers will need a computer with R installed to assist students in converting the elevation matrix into a 3D model. The {rayshader} package will be used to visualize and model the data.

-   **3D Printer:** A 3D printer will be required to print the 3D models created by students from the elevation data.

### Learning Targets

**Lesson 1:**

-   Students will be able to represent data using matrices and interpret the information presented in matrix form.

-   Students will be able to evaluate and judge the effectiveness and efficiency of different data representations, including matrices.

**Lesson 2:**

-   Students will be able to convert a matrix into a heatmap and interpret the data visualization.

-   Students will be able to transform the heatmap into a 3D model and print it using a 3D printer.

**Lesson 3:**

-   Students will be able to use real-world topographical data (elevation matrix) to create a 3D model of a selected location.

-   Students will be able to print the 3D model using a 3D printer, turning abstract data into a physical representation.

### Standards

#### Building On

-   Students can formulate questions, collect, present, and analyze data to answer the questions.

-   Students can use bar charts and pie charts to present and interpret data.

#### Adressing

-   Students can represent data in matrix form.

### Additional Resources

-   Google/PowerPoint slides.

-   Real world data sources.

-   Tutorial on basic R programming (optional).

-   3D printing tutorial (optional).

## Lesson 1

### Introduction to Matrix Representation

Let's explore some data representations!

::: {.callout-note icon="false"}
### Data Talks

```{r}
yog_climate <- read_csv(
  "POWER_Point_Monthly_19810101_20221231_007d79S_110d36E_UTC.csv",
  skip = 10,
  show_col_types = FALSE
)
yog_temp <- yog_climate |> 
  filter(PARAMETER == "T2M") |> 
  pivot_longer(
    cols = JAN:ANN,
    names_to = "month",
    values_to = "temp"
  ) |> 
  select(-PARAMETER) |> 
  mutate(
    month = factor(
      str_to_sentence(month),
      levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Ann")
    )
  )
yog_temp_month <- yog_temp |> 
  filter(month != "Ann") |> 
  group_by(month) |> 
  summarise(
    temp_avg = mean(temp, na.rm = TRUE),
    .groups = "drop"
  )
yog_temp_year <- yog_temp |> 
  filter(
    month == "Ann"
  ) |> 
  select(-month)
```

```{r}
#| label: fig-temp-yog
#| fig-cap: "Understanding Yogyakarta's temperature trends (2011--2020)"
#| fig-asp: 0.5625

plot_yog_temp <- yog_temp |> 
  filter(
    month != "Ann",
    YEAR >= 2011,
    YEAR <= 2020
  ) |> 
  ggplot(
    aes(x = month, y = temp)
  ) + 
  geom_line(
    aes(group = YEAR),
    linewidth = .5,
    color = "#1b9e77"
  ) + 
  geom_point(
    size = 1,
    color = "#d95f02"
  ) + 
  scale_y_continuous(
    limits = c(23, 28),
    breaks = 24:28
  ) + 
  facet_wrap(vars(YEAR), ncol = 5) + 
  theme_bw() + 
  theme(
    axis.text.x = element_text(
      angle = 90
    ),
    axis.title.x = element_blank()
  ) + 
  labs(
    title = "Average Monthly Temperature in Yogyakarta (2011–2020)",
    y = "Average Temperature (°C)"
  )
ggplotly(plot_yog_temp)
```

What do you notice? What do you wonder?
:::

::: {.callout-note icon="false"}
## Interpreting and Redesigning Data Representations

1.  What is the main message or insight about Yogyakarta's average monthly temperature (2011–2020) as shown in @fig-temp-yog?

2.  Do you think the diagram effectively communicates this message? What could be improved?

3.  How would you redesign this diagram to convey the same message more clearly or engagingly? Why?
:::

::: {.callout-tip collapse="true" icon="false"}
## Are You Ready for More?

@fig-heatmap-yog-temp is a visual representation provided by your friend Alex as an alternative to convey the same message about Yogyakarta's average monthly temperature (2011–2020).

```{r}
#| label: fig-heatmap-yog-temp
#| fig-cap: "Alex's work"
#| fig-asp: 0.5625

plot_yog_heatmap <- yog_temp |> 
  filter(
    YEAR >= 2011,
    YEAR <= 2020,
    month != "Ann"
  ) |> 
  mutate(YEAR = as.integer(YEAR)) |> 
  rename(year = YEAR) |> 
  ggplot(
    aes(x = year, y = month, fill = temp)
  ) + 
  geom_tile(color = "white") + 
  scale_fill_viridis_c(name = "Temp.") + 
  scale_x_continuous(
    breaks = 2011:2020
  ) + 
  theme_minimal() + 
  theme(
    axis.title = element_blank(),
    axis.text = element_text()
  )
ggplotly(plot_yog_heatmap)
```

1.  What patterns or trends can you observe in Alex's visualization (@fig-heatmap-yog-temp)?

2.  How does this representation help convey the message compared to the original diagram?

3.  How could you represent this figure more efficiently using only numbers? What would that look like?
:::

::: {.callout-note icon="false"}
## Decoding Data with Matrices

The matrix below shows the average temperature for each quarter at Bromo Tengger Semeru National Park from 2016 to 2020. Each row corresponds to a year (2016–2020), and each column represents a quarter: Q1 (Jan–Mar), Q2 (Apr–Jun), Q3 (Jul–Sep), and Q4 (Oct–Dec).

```{r}
semeru_temp <- read_csv(
  "POWER_Point_Monthly_20110101_20201231_008d03S_112d94E_UTC.csv",
  skip = 9,
  show_col_types = FALSE
)
semeru_temp_matrix <- semeru_temp |> 
  filter(
    YEAR >= 2016,
    YEAR <= 2020
  ) |> 
  select(-PARAMETER, -YEAR, -ANN) |> 
  as.matrix()
semeru_quart_matrix <- t(apply(semeru_temp_matrix, 1, function(row) {
  c(
    mean(row[1:3]),   # Q1: Jan, Feb, Mar
    mean(row[4:6]),   # Q2: Apr, May, Jun
    mean(row[7:9]),   # Q3: Jul, Aug, Sep
    mean(row[10:12])  # Q4: Oct, Nov, Dec
  )
}))

rownames(semeru_quart_matrix) <- 2016:2020
colnames(semeru_quart_matrix) <- c("Q1", "Q2", "Q3", "Q4")
```

$$
\begin{pmatrix}
26.12 & 25.73 & 25.03 & 25.36 \\
25.03 & 24.68 & 24.48 & 26.15 \\
24.90 & 25.10 & 24.64 & 26.45 \\
25.40 & 24.71 & 24.65 & 27.78 \\
26.01 & 25.21 & 24.94 & 25.95 \\
\end{pmatrix}
$$

1.  What is the average temperature for the third quarter (Jul–Sep) of 2020?

2.  How would you describe the trend in the average temperature throughout 2019?

3.  Which year had the highest average temperature? Which year had the lowest?
:::

::: {.callout-tip collapse="true" icon="false"}
## Are You Ready for More?

To answer the third question, your friend Paulina created a new matrix that shows the average temperature for each year. The matrix is shown below. Can you explain in detail what she did to create this matrix?

$$
\begin{pmatrix}25.56 \\25.08 \\25.27 \\25.63 \\25.52 \\\end{pmatrix}
$$
:::

::: {.callout-important icon="false"}
## Summary

Matrices are powerful tools in mathematics that help us organize and represent data in a structured way. A matrix is simply a grid of numbers arranged in rows and columns. It can be used to display various types of data, such as temperature, sales figures, or any other information that can be grouped into categories.

For example, you can use a matrix to represent temperature data. Let’s say we want to show the average temperature at a specific place throughout the year. Instead of writing down a long list of numbers, we can arrange the temperature data in a matrix. Each row could represent a year, and each column could represent a season or a specific time period, such as months or quarters.

For instance, the following matrix shows the average temperature at Bromo Tengger Semeru National Park for each quarter of the year, from 2016 to 2020:

$$
\begin{pmatrix} 
26.12 & 25.73 & 25.03 & 25.36 \\ 
25.03 & 24.68 & 24.48 & 26.15 \\ 
24.90 & 25.10 & 24.64 & 26.45 \\ 
25.40 & 24.71 & 24.65 & 27.78 \\ 
26.01 & 25.21 & 24.94 & 25.95 \\ 
\end{pmatrix}
$$ In this matrix:

-   The rows represent the years (2016 to 2020).

-   The columns represent the quarters of the year (Jan-Mar, Apr-Jun, Jul-Sep, Oct-Dec).

-   The numbers inside the matrix represent the average temperature for each quarter.

Using a matrix to represent temperature data makes it easier to analyze and spot patterns, such as trends in temperature over time or comparing different years and seasons. Matrices help us organize and interpret data more efficiently, providing clear insights into the information.
:::

## Lesson 2

### From Matrix to 3D Visualization

Let's turn matrices into 3D models!

## Lesson 3

### Modeling the World: Topography with Matrices

Let's bring matrices to life with 3D printing!

::: {.callout-note .lightbox icon="false"}
## Notice and Wonder

![Image: konsepsi.wordpress.com](merapi_model_1.jpg)

What do you notice? What do you wonder?
:::

::: {.callout-note icon="false"}
## Exploring Elevation Data Online

The Shuttle Radar Topography Mission (SRTM) was a NASA mission that mapped the Earth's surface to produce high-resolution elevation data. This data is invaluable for understanding topography and has wide-ranging applications, from environmental modeling and urban planning to disaster risk assessment. By representing elevation data in a matrix form, we can use mathematical tools to analyze and visualize terrains, making it easier to study and solve real-world problems.

1.  What type of information does the SRTM elevation data provide? How could it be used in real-world applications?

2.  Explore [the Derek Watkins' Tile Downloader website](https://dwtkns.com/srtm30m/){target="_blank"}. How is the elevation data presented? What do "30-meter resolution" and "tile" mean?

3.  How might the data from a single tile be represented as a matrix? What does each value in the matrix represent in terms of elevation?

4.  If you wanted to use this data to create a physical 3D model, what steps would you take, starting from the downloaded data?
:::

::: {.callout-note icon="false"}
## Elevating Data into 3D Models

1.  How can elevation values in a matrix represent the physical features of a landscape?

2.  If we visualize this matrix as a grid, how would the differences between adjacent elevation values appear in a 3D model?

3.  What steps are needed to turn a matrix of elevation data into a 3D model? Can you describe these steps in terms of inputs, processes, and outputs?
:::

::: {.callout-tip collapse="true" icon="false"}
## Are You Ready for More?

One way to create a 3D model from elevation data is by using R programming with packages such as [{rayshader}](https://CRAN.R-project.org/package=rayshader){target="_blank"}, [{terra}](https://CRAN.R-project.org/package=terra){target="_blank"}, and [{raster}](https://CRAN.R-project.org/package=raster){target="_blank"}. Below are the codes that will help you generate the 3D model of Mount Merapi.

``` r
# Step 1
library(rayshader)
library(terra)
library(raster)

# Step 2
S08E110 <- terra::rast("S08E110.hgt")
merapi_boundaries <- raster::extent(
  110.3967, 110.4967,
  -7.590278, -7.490278
)
merapi_matrix <- terra::crop(
  x = S08E110,
  y = merapi_boundaries
) |> 
  rayshader::raster_to_matrix()

# Step 3
merapi_hillshade <- sphere_shade(
  heightmap = merapi_matrix
)
plot_3d(
  hillshade = merapi_hillshade,
  heightmap = merapi_matrix,
  zscale = 30
)

# Step 4
save_3dprint(
  filename = "merapi_3d.stl",
  maxwidth = 150,
  unit = "mm"
)
```

1.  Can you explain what each step of the code does?

2.  What do you think the result of the code will look like? You can download the resulting STL file [here](https://github.com/ydkristanto/advanced-3d-printing-jku/blob/main/merapi_3d.stl){target="_blank"}. To view it, you can use an STL viewer, such as [viewstl.com](https://www.viewstl.com/){target="_blank"}.
:::

## Practice

Hello!
:::::::::::::
